{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "701fb27f-feb7-4482-8ec2-8095be8df2fd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "91e5b1e5-b97b-409c-92b6-9d8837f4e9de",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "st.session_state has no attribute \"auth_ok\". Did you forget to initialize it? More info: https://docs.streamlit.io/library/advanced-features/session-state#initialization",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\session_state.py:398\u001b[0m, in \u001b[0;36mSessionState.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    397\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 398\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem(widget_id, key)\n\u001b[0;32m    399\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\session_state.py:443\u001b[0m, in \u001b[0;36mSessionState._getitem\u001b[1;34m(self, widget_id, user_key)\u001b[0m\n\u001b[0;32m    442\u001b[0m \u001b[38;5;66;03m# We'll never get here\u001b[39;00m\n\u001b[1;32m--> 443\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m\n",
      "\u001b[1;31mKeyError\u001b[0m: ",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\session_state_proxy.py:119\u001b[0m, in \u001b[0;36mSessionStateProxy.__getattr__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    118\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 119\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[key]\n\u001b[0;32m    120\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\session_state_proxy.py:90\u001b[0m, in \u001b[0;36mSessionStateProxy.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m     89\u001b[0m require_valid_user_key(key)\n\u001b[1;32m---> 90\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m get_session_state()[key]\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\safe_session_state.py:91\u001b[0m, in \u001b[0;36mSafeSessionState.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m     90\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[1;32m---> 91\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_state[key]\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\session_state.py:400\u001b[0m, in \u001b[0;36mSessionState.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    399\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n\u001b[1;32m--> 400\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(_missing_key_error_message(key))\n",
      "\u001b[1;31mKeyError\u001b[0m: 'st.session_state has no key \"auth_ok\". Did you forget to initialize it? More info: https://docs.streamlit.io/library/advanced-features/session-state#initialization'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[3], line 135\u001b[0m\n\u001b[0;32m    132\u001b[0m             st\u001b[38;5;241m.\u001b[39msession_state\u001b[38;5;241m.\u001b[39musername \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    133\u001b[0m             st\u001b[38;5;241m.\u001b[39merror(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid credentials\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 135\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m st\u001b[38;5;241m.\u001b[39msession_state\u001b[38;5;241m.\u001b[39mauth_ok:\n\u001b[0;32m    136\u001b[0m     st\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPlease sign in to continue.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    137\u001b[0m     st\u001b[38;5;241m.\u001b[39mstop()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\session_state_proxy.py:121\u001b[0m, in \u001b[0;36mSessionStateProxy.__getattr__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    119\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[key]\n\u001b[0;32m    120\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n\u001b[1;32m--> 121\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(_missing_attr_error_message(key))\n",
      "\u001b[1;31mAttributeError\u001b[0m: st.session_state has no attribute \"auth_ok\". Did you forget to initialize it? More info: https://docs.streamlit.io/library/advanced-features/session-state#initialization"
     ]
    }
   ],
   "source": [
    "# TaskManagement.py\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import datetime as dt\n",
    "import uuid\n",
    "import gspread\n",
    "import streamlit as st\n",
    "\n",
    "# --- Initialize session state variables ---\n",
    "if \"auth_ok\" not in st.session_state:\n",
    "    st.session_state.auth_ok = False\n",
    "if \"username\" not in st.session_state:\n",
    "    st.session_state.username = None\n",
    "if \"role\" not in st.session_state:\n",
    "    st.session_state.role = None\n",
    "\n",
    "\n",
    "# ---------------- CONFIG ----------------\n",
    "APP_TITLE = \"üìù Task Management\"\n",
    "SPREADSHEET_NAME = \"TaskManagement\"   # Exact spreadsheet name\n",
    "WORKSHEET_NAME = \"Tasks\"              # Exact tab name\n",
    "\n",
    "# Simple users: replace or expand as needed\n",
    "USERS = {\n",
    "    \"admin\": {\"password\": \"admin123\", \"role\": \"Admin\"},\n",
    "    \"ali\":   {\"password\": \"emp123\",   \"role\": \"Employee\"},\n",
    "    \"ahmed\": {\"password\": \"emp456\",   \"role\": \"Employee\"},\n",
    "}\n",
    "\n",
    "# EXACT expected columns in row 1 of the Tasks tab (order matters)\n",
    "COLS = [\n",
    "    \"Date\", \"Task ID\", \"Client Name\", \"Work Detail\", \"Target Date\",\n",
    "    \"Priority\", \"Status\", \"Completion Date\", \"Remarks\",\n",
    "    \"Created By\", \"Assigned To\", \"Approved By\"\n",
    "]\n",
    "\n",
    "# Allowed choices\n",
    "STATUS_EMPLOYEE_CHOICES = [\"In Progress\", \"Completed\"]\n",
    "STATUS_ADMIN_CHOICES = [\"Pending Approval\", \"In Progress\", \"Completed\", \"Rejected\"]\n",
    "PRIORITY_CHOICES = [\"Low\", \"Medium\", \"High\"]\n",
    "\n",
    "# ---------------- Google Sheets helpers ----------------\n",
    "@st.cache_resource(show_spinner=False)\n",
    "def get_ws():\n",
    "    \"\"\"Return a gspread worksheet. Supports Streamlit secrets (preferred) or local service_account.json.\"\"\"\n",
    "    try:\n",
    "        if \"gcp_service_account\" in st.secrets:\n",
    "            # If deployed on Streamlit Cloud, store the JSON in secrets as gcp_service_account\n",
    "            client = gspread.service_account_from_dict(st.secrets[\"gcp_service_account\"])\n",
    "        else:\n",
    "            # Local development: expects service_account.json in the same folder\n",
    "            client = gspread.service_account(filename=\"service_account.json\")\n",
    "    except Exception as e:\n",
    "        st.error(\"Failed to load Google service account credentials. \"\n",
    "                 \"Either add service_account.json to this folder for local runs \"\n",
    "                 \"or set gcp_service_account in Streamlit secrets for deployment.\")\n",
    "        st.stop()\n",
    "\n",
    "    try:\n",
    "        sh = client.open(SPREADSHEET_NAME)\n",
    "        ws = sh.worksheet(WORKSHEET_NAME)\n",
    "    except Exception as e:\n",
    "        st.error(f\"Could not open spreadsheet '{SPREADSHEET_NAME}' or worksheet '{WORKSHEET_NAME}'. \"\n",
    "                 \"Make sure names match exactly and the service account has Editor access.\")\n",
    "        st.stop()\n",
    "    return ws\n",
    "\n",
    "def verify_headers(ws):\n",
    "    header = ws.row_values(1)\n",
    "    if header != COLS:\n",
    "        st.error(\"‚ùó Sheet header mismatch. Row 1 must exactly match the following columns (order matters):\")\n",
    "        st.code(\" | \".join(COLS))\n",
    "        st.write(\"Found:\")\n",
    "        st.code(\" | \".join(header))\n",
    "        st.stop()\n",
    "\n",
    "def fetch_df(ws):\n",
    "    records = ws.get_all_records()\n",
    "    df = pd.DataFrame(records)\n",
    "    if df.empty:\n",
    "        df = pd.DataFrame(columns=COLS)\n",
    "    # parse date-like columns into datetime\n",
    "    for dcol in [\"Date\", \"Target Date\", \"Completion Date\"]:\n",
    "        if dcol in df.columns:\n",
    "            df[dcol] = pd.to_datetime(df[dcol], errors=\"coerce\")\n",
    "    return df\n",
    "\n",
    "def append_row(ws, row_values):\n",
    "    ws.append_row(row_values)\n",
    "\n",
    "def update_cell(ws, row_idx_1based, col_idx_1based, value):\n",
    "    ws.update_cell(row_idx_1based, col_idx_1based, value)\n",
    "\n",
    "def update_row(ws, row_idx_1based, new_values_list):\n",
    "    # 12 columns => A..L\n",
    "    ws.update(f\"A{row_idx_1based}:L{row_idx_1based}\", [new_values_list])\n",
    "\n",
    "def delete_row(ws, row_idx_1based):\n",
    "    ws.delete_row(row_idx_1based)\n",
    "\n",
    "def row_index_by_task_id(df, task_id):\n",
    "    if df.empty or \"Task ID\" not in df.columns:\n",
    "        return None\n",
    "    if task_id not in set(df[\"Task ID\"]):\n",
    "        return None\n",
    "    # df.index is 0-based. +2 accounts for header row and 1-based sheet indexing\n",
    "    return df.index[df[\"Task ID\"] == task_id][0] + 2\n",
    "\n",
    "# ---------------- App init ----------------\n",
    "st.set_page_config(page_title=APP_TITLE, page_icon=\"üìù\", layout=\"wide\")\n",
    "st.title(APP_TITLE)\n",
    "\n",
    "# Sidebar login\n",
    "with st.sidebar:\n",
    "    st.header(\"üîë Login\")\n",
    "    username = st.text_input(\"Username\")\n",
    "    password = st.text_input(\"Password\", type=\"password\")\n",
    "    if \"auth_ok\" not in st.session_state:\n",
    "        st.session_state.auth_ok = False\n",
    "        st.session_state.role = None\n",
    "        st.session_state.username = None\n",
    "    if st.button(\"Sign in\", use_container_width=True):\n",
    "        user = USERS.get(username)\n",
    "        if user and user[\"password\"] == password:\n",
    "            st.session_state.auth_ok = True\n",
    "            st.session_state.role = user[\"role\"]\n",
    "            st.session_state.username = username\n",
    "            st.success(f\"Logged in as {user['role']}\")\n",
    "        else:\n",
    "            st.session_state.auth_ok = False\n",
    "            st.session_state.role = None\n",
    "            st.session_state.username = None\n",
    "            st.error(\"Invalid credentials\")\n",
    "\n",
    "if not st.session_state.auth_ok:\n",
    "    st.info(\"Please sign in to continue.\")\n",
    "    st.stop()\n",
    "\n",
    "role = st.session_state.role\n",
    "current_user = st.session_state.username\n",
    "\n",
    "# Connect sheet and load data\n",
    "ws = get_ws()\n",
    "verify_headers(ws)\n",
    "df = fetch_df(ws)\n",
    "\n",
    "# ---------------- KPI helper ----------------\n",
    "def kpi_cards(dataframe, scope_label=\"Overall\"):\n",
    "    total = len(dataframe)\n",
    "    pending = len(dataframe[dataframe[\"Status\"] == \"Pending Approval\"])\n",
    "    in_prog = len(dataframe[dataframe[\"Status\"] == \"In Progress\"])\n",
    "    completed = len(dataframe[dataframe[\"Status\"] == \"Completed\"])\n",
    "    overdue = len(\n",
    "        dataframe[\n",
    "            dataframe[\"Target Date\"].notna()\n",
    "            & (dataframe[\"Target Date\"] < pd.Timestamp.today().normalize())\n",
    "            & (~dataframe[\"Status\"].isin([\"Completed\", \"Rejected\"]))\n",
    "        ]\n",
    "    )\n",
    "    st.subheader(f\"üìä KPIs ‚Äî {scope_label}\")\n",
    "    c1, c2, c3, c4, c5 = st.columns(5)\n",
    "    c1.metric(\"Total\", total)\n",
    "    c2.metric(\"Pending Approval\", pending)\n",
    "    c3.metric(\"In Progress\", in_prog)\n",
    "    c4.metric(\"Completed\", completed)\n",
    "    c5.metric(\"Overdue\", overdue)\n",
    "\n",
    "# ---------------- Role: Admin ----------------\n",
    "if role == \"Admin\":\n",
    "    st.sidebar.header(\"üîé Filters\")\n",
    "    f_status = st.sidebar.multiselect(\"Status\", STATUS_ADMIN_CHOICES)\n",
    "    f_priority = st.sidebar.multiselect(\"Priority\", PRIORITY_CHOICES)\n",
    "    f_assignee = st.sidebar.text_input(\"Assignee contains\")\n",
    "    f_client = st.sidebar.text_input(\"Client contains\")\n",
    "\n",
    "    view_df = df.copy()\n",
    "    if f_status:\n",
    "        view_df = view_df[view_df[\"Status\"].isin(f_status)]\n",
    "    if f_priority:\n",
    "        view_df = view_df[view_df[\"Priority\"].isin(f_priority)]\n",
    "    if f_assignee:\n",
    "        view_df = view_df[view_df[\"Assigned To\"].str.contains(f_assignee, case=False, na=False)]\n",
    "    if f_client:\n",
    "        view_df = view_df[view_df[\"Client Name\"].str.contains(f_client, case=False, na=False)]\n",
    "\n",
    "    kpi_cards(view_df, \"Admin\")\n",
    "    st.subheader(\"üìã All Tasks\")\n",
    "    st.dataframe(view_df.sort_values(by=\"Target Date\", na_position=\"last\"), use_container_width=True)\n",
    "\n",
    "    st.markdown(\"---\")\n",
    "    st.subheader(\"‚úÖ Approve / Complete / Reject\")\n",
    "\n",
    "    pending = df[df[\"Status\"] == \"Pending Approval\"]\n",
    "    if not pending.empty:\n",
    "        def label_for_tid(tid):\n",
    "            row = pending[pending[\"Task ID\"] == tid].iloc[0]\n",
    "            wd = str(row[\"Work Detail\"])[:70].replace(\"\\n\", \" \")\n",
    "            return f\"{tid} ‚Äî {wd}\"\n",
    "        pick = st.selectbox(\"Pick a Pending task\", pending[\"Task ID\"].tolist(), format_func=label_for_tid)\n",
    "        colA, colB, colC = st.columns(3)\n",
    "        if colA.button(\"Approve ‚ûú In Progress\"):\n",
    "            rix = row_index_by_task_id(df, pick)\n",
    "            if rix:\n",
    "                update_cell(ws, rix, COLS.index(\"Status\") + 1, \"In Progress\")\n",
    "                update_cell(ws, rix, COLS.index(\"Approved By\") + 1, current_user)\n",
    "                st.success(\"Task approved.\")\n",
    "                st.experimental_rerun()\n",
    "        if colB.button(\"Mark Completed\"):\n",
    "            rix = row_index_by_task_id(df, pick)\n",
    "            if rix:\n",
    "                update_cell(ws, rix, COLS.index(\"Status\") + 1, \"Completed\")\n",
    "                update_cell(ws, rix, COLS.index(\"Completion Date\") + 1, dt.date.today().isoformat())\n",
    "                if not pending[pending[\"Task ID\"] == pick][\"Approved By\"].iloc[0]:\n",
    "                    update_cell(ws, rix, COLS.index(\"Approved By\") + 1, current_user)\n",
    "                st.success(\"Task marked completed.\")\n",
    "                st.experimental_rerun()\n",
    "        if colC.button(\"Reject\"):\n",
    "            rix = row_index_by_task_id(df, pick)\n",
    "            if rix:\n",
    "                update_cell(ws, rix, COLS.index(\"Status\") + 1, \"Rejected\")\n",
    "                update_cell(ws, rix, COLS.index(\"Approved By\") + 1, current_user)\n",
    "                st.warning(\"Task rejected.\")\n",
    "                st.experimental_rerun()\n",
    "    else:\n",
    "        st.info(\"No tasks awaiting approval.\")\n",
    "\n",
    "    st.markdown(\"---\")\n",
    "    st.subheader(\"‚úèÔ∏è Edit / üóëÔ∏è Delete any task\")\n",
    "    if not df.empty:\n",
    "        to_manage = st.selectbox(\"Pick Task ID\", df[\"Task ID\"].tolist())\n",
    "        if to_manage:\n",
    "            row = df[df[\"Task ID\"] == to_manage].iloc[0]\n",
    "            with st.form(\"admin_edit\"):\n",
    "                client = st.text_input(\"Client Name\", row[\"Client Name\"])\n",
    "                work = st.text_area(\"Work Detail\", row[\"Work Detail\"])\n",
    "                target = st.date_input(\"Target Date\", value=(row[\"Target Date\"].date() if pd.notna(row[\"Target Date\"]) else dt.date.today()))\n",
    "                priority = st.selectbox(\"Priority\", PRIORITY_CHOICES, index=PRIORITY_CHOICES.index(row[\"Priority\"]) if row[\"Priority\"] in PRIORITY_CHOICES else 1)\n",
    "                status = st.selectbox(\"Status\", STATUS_ADMIN_CHOICES, index=STATUS_ADMIN_CHOICES.index(row[\"Status\"]) if row[\"Status\"] in STATUS_ADMIN_CHOICES else 0)\n",
    "                completion = st.date_input(\"Completion Date\", value=(row[\"Completion Date\"].date() if pd.notna(row[\"Completion Date\"]) else dt.date.today()))\n",
    "                remarks = st.text_area(\"Remarks\", row.get(\"Remarks\", \"\"))\n",
    "                assigned_to = st.text_input(\"Assigned To\", row.get(\"Assigned To\", \"\"))\n",
    "                submit_edit = st.form_submit_button(\"Save Changes\")\n",
    "            col1, col2 = st.columns(2)\n",
    "            with col1:\n",
    "                if submit_edit:\n",
    "                    new_row = [\n",
    "                        row[\"Date\"].date().isoformat() if pd.notna(row[\"Date\"]) else dt.date.today().isoformat(),\n",
    "                        row[\"Task ID\"],\n",
    "                        client,\n",
    "                        work,\n",
    "                        target.isoformat(),\n",
    "                        priority,\n",
    "                        status,\n",
    "                        completion.isoformat() if completion else \"\",\n",
    "                        remarks,\n",
    "                        row[\"Created By\"],\n",
    "                        assigned_to,\n",
    "                        row.get(\"Approved By\", \"\")\n",
    "                    ]\n",
    "                    rix = row_index_by_task_id(df, row[\"Task ID\"])\n",
    "                    update_row(ws, rix, new_row)\n",
    "                    st.success(\"Updated.\")\n",
    "                    st.experimental_rerun()\n",
    "            with col2:\n",
    "                if st.button(\"üóëÔ∏è Delete Task\"):\n",
    "                    rix = row_index_by_task_id(df, row[\"Task ID\"])\n",
    "                    delete_row(ws, rix)\n",
    "                    st.warning(\"Deleted.\")\n",
    "                    st.experimental_rerun()\n",
    "\n",
    "# ---------------- Role: Employee ----------------\n",
    "elif role == \"Employee\":\n",
    "    my_df = df[(df[\"Assigned To\"] == current_user) | (df[\"Created By\"] == current_user)].copy()\n",
    "\n",
    "    kpi_cards(my_df, f\"Employee: {current_user}\")\n",
    "    st.subheader(\"üë®‚Äçüíª My Tasks\")\n",
    "    st.dataframe(my_df.sort_values(by=\"Target Date\", na_position=\"last\"), use_container_width=True)\n",
    "\n",
    "    st.markdown(\"---\")\n",
    "    st.subheader(\"‚ûï Create New Task (goes to Pending Approval)\")\n",
    "    with st.form(\"create_task\"):\n",
    "        client = st.text_input(\"Client Name\")\n",
    "        work = st.text_area(\"Work Detail\")\n",
    "        target = st.date_input(\"Target Date\", value=dt.date.today())\n",
    "        priority = st.selectbox(\"Priority\", PRIORITY_CHOICES, index=1)\n",
    "        assigned_to = st.text_input(\"Assign To\", value=current_user)\n",
    "        remarks = st.text_area(\"Remarks\", \"\")\n",
    "        submit = st.form_submit_button(\"Create Task\")\n",
    "        if submit:\n",
    "            if not client or not work:\n",
    "                st.error(\"Client Name and Work Detail are required.\")\n",
    "            else:\n",
    "                today = dt.date.today().isoformat()\n",
    "                task_id = f\"T{dt.datetime.now().strftime('%Y%m%d%H%M%S')}-{uuid.uuid4().hex[:6]}\"\n",
    "                row_vals = [\n",
    "                    today,\n",
    "                    task_id,\n",
    "                    client,\n",
    "                    work,\n",
    "                    target.isoformat(),\n",
    "                    priority,\n",
    "                    \"Pending Approval\",\n",
    "                    \"\",\n",
    "                    remarks,\n",
    "                    current_user,\n",
    "                    assigned_to,\n",
    "                    \"\"\n",
    "                ]\n",
    "                append_row(ws, row_vals)\n",
    "                st.success(\"Task submitted for approval.\")\n",
    "                st.experimental_rerun()\n",
    "\n",
    "    st.markdown(\"---\")\n",
    "    st.subheader(\"üìà Update Progress (only after approval)\")\n",
    "    up_df = my_df[~my_df[\"Status\"].isin([\"Pending Approval\", \"Rejected\"])]\n",
    "    if up_df.empty:\n",
    "        st.info(\"No tasks ready for progress update (waiting for approval or none assigned).\")\n",
    "    else:\n",
    "        up_task = st.selectbox(\"Select Task ID\", up_df[\"Task ID\"].tolist())\n",
    "        if up_task:\n",
    "            row = up_df[up_df[\"Task ID\"] == up_task].iloc[0]\n",
    "            with st.form(\"progress_form\"):\n",
    "                new_status = st.selectbox(\"New Status\", STATUS_EMPLOYEE_CHOICES,\n",
    "                                          index=STATUS_EMPLOYEE_CHOICES.index(\"In Progress\") if row[\"Status\"] != \"Completed\" else STATUS_EMPLOYEE_CHOICES.index(\"Completed\"))\n",
    "                new_remarks = st.text_area(\"Remarks\", row.get(\"Remarks\", \"\"))\n",
    "                save = st.form_submit_button(\"Update Progress\")\n",
    "                if save:\n",
    "                    rix = row_index_by_task_id(df, row[\"Task ID\"])\n",
    "                    update_cell(ws, rix, COLS.index(\"Status\") + 1, new_status)\n",
    "                    update_cell(ws, rix, COLS.index(\"Remarks\") + 1, new_remarks)\n",
    "                    if new_status == \"Completed\":\n",
    "                        update_cell(ws, rix, COLS.index(\"Completion Date\") + 1, dt.date.today().isoformat())\n",
    "                    st.success(\"Progress updated.\")\n",
    "                    st.experimental_rerun()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b1f7186f-0ee0-4549-8634-e429f8ba9da4",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "st.session_state has no attribute \"auth_ok\". Did you forget to initialize it? More info: https://docs.streamlit.io/library/advanced-features/session-state#initialization",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\session_state.py:398\u001b[0m, in \u001b[0;36mSessionState.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    397\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 398\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem(widget_id, key)\n\u001b[0;32m    399\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\session_state.py:443\u001b[0m, in \u001b[0;36mSessionState._getitem\u001b[1;34m(self, widget_id, user_key)\u001b[0m\n\u001b[0;32m    442\u001b[0m \u001b[38;5;66;03m# We'll never get here\u001b[39;00m\n\u001b[1;32m--> 443\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m\n",
      "\u001b[1;31mKeyError\u001b[0m: ",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\session_state_proxy.py:119\u001b[0m, in \u001b[0;36mSessionStateProxy.__getattr__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    118\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 119\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[key]\n\u001b[0;32m    120\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\session_state_proxy.py:90\u001b[0m, in \u001b[0;36mSessionStateProxy.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m     89\u001b[0m require_valid_user_key(key)\n\u001b[1;32m---> 90\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m get_session_state()[key]\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\safe_session_state.py:91\u001b[0m, in \u001b[0;36mSafeSessionState.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m     90\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[1;32m---> 91\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_state[key]\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\session_state.py:400\u001b[0m, in \u001b[0;36mSessionState.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    399\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n\u001b[1;32m--> 400\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(_missing_key_error_message(key))\n",
      "\u001b[1;31mKeyError\u001b[0m: 'st.session_state has no key \"auth_ok\". Did you forget to initialize it? More info: https://docs.streamlit.io/library/advanced-features/session-state#initialization'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[4], line 135\u001b[0m\n\u001b[0;32m    132\u001b[0m             st\u001b[38;5;241m.\u001b[39msession_state\u001b[38;5;241m.\u001b[39musername \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    133\u001b[0m             st\u001b[38;5;241m.\u001b[39merror(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid credentials\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 135\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m st\u001b[38;5;241m.\u001b[39msession_state\u001b[38;5;241m.\u001b[39mauth_ok:\n\u001b[0;32m    136\u001b[0m     st\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPlease sign in to continue.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    137\u001b[0m     st\u001b[38;5;241m.\u001b[39mstop()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\streamlit\\runtime\\state\\session_state_proxy.py:121\u001b[0m, in \u001b[0;36mSessionStateProxy.__getattr__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    119\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[key]\n\u001b[0;32m    120\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n\u001b[1;32m--> 121\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(_missing_attr_error_message(key))\n",
      "\u001b[1;31mAttributeError\u001b[0m: st.session_state has no attribute \"auth_ok\". Did you forget to initialize it? More info: https://docs.streamlit.io/library/advanced-features/session-state#initialization"
     ]
    }
   ],
   "source": [
    "# TaskManagement.py\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import datetime as dt\n",
    "import uuid\n",
    "import gspread\n",
    "import streamlit as st\n",
    "\n",
    "# --- Initialize session state variables ---\n",
    "if \"auth_ok\" not in st.session_state:\n",
    "    st.session_state.auth_ok = False\n",
    "if \"username\" not in st.session_state:\n",
    "    st.session_state.username = None\n",
    "if \"role\" not in st.session_state:\n",
    "    st.session_state.role = None\n",
    "\n",
    "\n",
    "# ---------------- CONFIG ----------------\n",
    "APP_TITLE = \"üìù Task Management\"\n",
    "SPREADSHEET_NAME = \"TaskManagement\"   # Exact spreadsheet name\n",
    "WORKSHEET_NAME = \"Tasks\"              # Exact tab name\n",
    "\n",
    "# Simple users: replace or expand as needed\n",
    "USERS = {\n",
    "    \"admin\": {\"password\": \"admin123\", \"role\": \"Admin\"},\n",
    "    \"ali\":   {\"password\": \"emp123\",   \"role\": \"Employee\"},\n",
    "    \"ahmed\": {\"password\": \"emp456\",   \"role\": \"Employee\"},\n",
    "}\n",
    "\n",
    "# EXACT expected columns in row 1 of the Tasks tab (order matters)\n",
    "COLS = [\n",
    "    \"Date\", \"Task ID\", \"Client Name\", \"Work Detail\", \"Target Date\",\n",
    "    \"Priority\", \"Status\", \"Completion Date\", \"Remarks\",\n",
    "    \"Created By\", \"Assigned To\", \"Approved By\"\n",
    "]\n",
    "\n",
    "# Allowed choices\n",
    "STATUS_EMPLOYEE_CHOICES = [\"In Progress\", \"Completed\"]\n",
    "STATUS_ADMIN_CHOICES = [\"Pending Approval\", \"In Progress\", \"Completed\", \"Rejected\"]\n",
    "PRIORITY_CHOICES = [\"Low\", \"Medium\", \"High\"]\n",
    "\n",
    "# ---------------- Google Sheets helpers ----------------\n",
    "@st.cache_resource(show_spinner=False)\n",
    "def get_ws():\n",
    "    \"\"\"Return a gspread worksheet. Supports Streamlit secrets (preferred) or local service_account.json.\"\"\"\n",
    "    try:\n",
    "        if \"gcp_service_account\" in st.secrets:\n",
    "            # If deployed on Streamlit Cloud, store the JSON in secrets as gcp_service_account\n",
    "            client = gspread.service_account_from_dict(st.secrets[\"gcp_service_account\"])\n",
    "        else:\n",
    "            # Local development: expects service_account.json in the same folder\n",
    "            client = gspread.service_account(filename=\"service_account.json\")\n",
    "    except Exception as e:\n",
    "        st.error(\"Failed to load Google service account credentials. \"\n",
    "                 \"Either add service_account.json to this folder for local runs \"\n",
    "                 \"or set gcp_service_account in Streamlit secrets for deployment.\")\n",
    "        st.stop()\n",
    "\n",
    "    try:\n",
    "        sh = client.open(SPREADSHEET_NAME)\n",
    "        ws = sh.worksheet(WORKSHEET_NAME)\n",
    "    except Exception as e:\n",
    "        st.error(f\"Could not open spreadsheet '{SPREADSHEET_NAME}' or worksheet '{WORKSHEET_NAME}'. \"\n",
    "                 \"Make sure names match exactly and the service account has Editor access.\")\n",
    "        st.stop()\n",
    "    return ws\n",
    "\n",
    "def verify_headers(ws):\n",
    "    header = ws.row_values(1)\n",
    "    if header != COLS:\n",
    "        st.error(\"‚ùó Sheet header mismatch. Row 1 must exactly match the following columns (order matters):\")\n",
    "        st.code(\" | \".join(COLS))\n",
    "        st.write(\"Found:\")\n",
    "        st.code(\" | \".join(header))\n",
    "        st.stop()\n",
    "\n",
    "def fetch_df(ws):\n",
    "    records = ws.get_all_records()\n",
    "    df = pd.DataFrame(records)\n",
    "    if df.empty:\n",
    "        df = pd.DataFrame(columns=COLS)\n",
    "    # parse date-like columns into datetime\n",
    "    for dcol in [\"Date\", \"Target Date\", \"Completion Date\"]:\n",
    "        if dcol in df.columns:\n",
    "            df[dcol] = pd.to_datetime(df[dcol], errors=\"coerce\")\n",
    "    return df\n",
    "\n",
    "def append_row(ws, row_values):\n",
    "    ws.append_row(row_values)\n",
    "\n",
    "def update_cell(ws, row_idx_1based, col_idx_1based, value):\n",
    "    ws.update_cell(row_idx_1based, col_idx_1based, value)\n",
    "\n",
    "def update_row(ws, row_idx_1based, new_values_list):\n",
    "    # 12 columns => A..L\n",
    "    ws.update(f\"A{row_idx_1based}:L{row_idx_1based}\", [new_values_list])\n",
    "\n",
    "def delete_row(ws, row_idx_1based):\n",
    "    ws.delete_row(row_idx_1based)\n",
    "\n",
    "def row_index_by_task_id(df, task_id):\n",
    "    if df.empty or \"Task ID\" not in df.columns:\n",
    "        return None\n",
    "    if task_id not in set(df[\"Task ID\"]):\n",
    "        return None\n",
    "    # df.index is 0-based. +2 accounts for header row and 1-based sheet indexing\n",
    "    return df.index[df[\"Task ID\"] == task_id][0] + 2\n",
    "\n",
    "# ---------------- App init ----------------\n",
    "st.set_page_config(page_title=APP_TITLE, page_icon=\"üìù\", layout=\"wide\")\n",
    "st.title(APP_TITLE)\n",
    "\n",
    "# Sidebar login\n",
    "with st.sidebar:\n",
    "    st.header(\"üîë Login\")\n",
    "    username = st.text_input(\"Username\")\n",
    "    password = st.text_input(\"Password\", type=\"password\")\n",
    "    if \"auth_ok\" not in st.session_state:\n",
    "        st.session_state.auth_ok = False\n",
    "        st.session_state.role = None\n",
    "        st.session_state.username = None\n",
    "    if st.button(\"Sign in\", use_container_width=True):\n",
    "        user = USERS.get(username)\n",
    "        if user and user[\"password\"] == password:\n",
    "            st.session_state.auth_ok = True\n",
    "            st.session_state.role = user[\"role\"]\n",
    "            st.session_state.username = username\n",
    "            st.success(f\"Logged in as {user['role']}\")\n",
    "        else:\n",
    "            st.session_state.auth_ok = False\n",
    "            st.session_state.role = None\n",
    "            st.session_state.username = None\n",
    "            st.error(\"Invalid credentials\")\n",
    "\n",
    "if not st.session_state.auth_ok:\n",
    "    st.info(\"Please sign in to continue.\")\n",
    "    st.stop()\n",
    "\n",
    "role = st.session_state.role\n",
    "current_user = st.session_state.username\n",
    "\n",
    "# Connect sheet and load data\n",
    "ws = get_ws()\n",
    "verify_headers(ws)\n",
    "df = fetch_df(ws)\n",
    "\n",
    "# ---------------- KPI helper ----------------\n",
    "def kpi_cards(dataframe, scope_label=\"Overall\"):\n",
    "    total = len(dataframe)\n",
    "    pending = len(dataframe[dataframe[\"Status\"] == \"Pending Approval\"])\n",
    "    in_prog = len(dataframe[dataframe[\"Status\"] == \"In Progress\"])\n",
    "    completed = len(dataframe[dataframe[\"Status\"] == \"Completed\"])\n",
    "    overdue = len(\n",
    "        dataframe[\n",
    "            dataframe[\"Target Date\"].notna()\n",
    "            & (dataframe[\"Target Date\"] < pd.Timestamp.today().normalize())\n",
    "            & (~dataframe[\"Status\"].isin([\"Completed\", \"Rejected\"]))\n",
    "        ]\n",
    "    )\n",
    "    st.subheader(f\"üìä KPIs ‚Äî {scope_label}\")\n",
    "    c1, c2, c3, c4, c5 = st.columns(5)\n",
    "    c1.metric(\"Total\", total)\n",
    "    c2.metric(\"Pending Approval\", pending)\n",
    "    c3.metric(\"In Progress\", in_prog)\n",
    "    c4.metric(\"Completed\", completed)\n",
    "    c5.metric(\"Overdue\", overdue)\n",
    "\n",
    "# ---------------- Role: Admin ----------------\n",
    "if role == \"Admin\":\n",
    "    st.sidebar.header(\"üîé Filters\")\n",
    "    f_status = st.sidebar.multiselect(\"Status\", STATUS_ADMIN_CHOICES)\n",
    "    f_priority = st.sidebar.multiselect(\"Priority\", PRIORITY_CHOICES)\n",
    "    f_assignee = st.sidebar.text_input(\"Assignee contains\")\n",
    "    f_client = st.sidebar.text_input(\"Client contains\")\n",
    "\n",
    "    view_df = df.copy()\n",
    "    if f_status:\n",
    "        view_df = view_df[view_df[\"Status\"].isin(f_status)]\n",
    "    if f_priority:\n",
    "        view_df = view_df[view_df[\"Priority\"].isin(f_priority)]\n",
    "    if f_assignee:\n",
    "        view_df = view_df[view_df[\"Assigned To\"].str.contains(f_assignee, case=False, na=False)]\n",
    "    if f_client:\n",
    "        view_df = view_df[view_df[\"Client Name\"].str.contains(f_client, case=False, na=False)]\n",
    "\n",
    "    kpi_cards(view_df, \"Admin\")\n",
    "    st.subheader(\"üìã All Tasks\")\n",
    "    st.dataframe(view_df.sort_values(by=\"Target Date\", na_position=\"last\"), use_container_width=True)\n",
    "\n",
    "    st.markdown(\"---\")\n",
    "    st.subheader(\"‚úÖ Approve / Complete / Reject\")\n",
    "\n",
    "    pending = df[df[\"Status\"] == \"Pending Approval\"]\n",
    "    if not pending.empty:\n",
    "        def label_for_tid(tid):\n",
    "            row = pending[pending[\"Task ID\"] == tid].iloc[0]\n",
    "            wd = str(row[\"Work Detail\"])[:70].replace(\"\\n\", \" \")\n",
    "            return f\"{tid} ‚Äî {wd}\"\n",
    "        pick = st.selectbox(\"Pick a Pending task\", pending[\"Task ID\"].tolist(), format_func=label_for_tid)\n",
    "        colA, colB, colC = st.columns(3)\n",
    "        if colA.button(\"Approve ‚ûú In Progress\"):\n",
    "            rix = row_index_by_task_id(df, pick)\n",
    "            if rix:\n",
    "                update_cell(ws, rix, COLS.index(\"Status\") + 1, \"In Progress\")\n",
    "                update_cell(ws, rix, COLS.index(\"Approved By\") + 1, current_user)\n",
    "                st.success(\"Task approved.\")\n",
    "                st.experimental_rerun()\n",
    "        if colB.button(\"Mark Completed\"):\n",
    "            rix = row_index_by_task_id(df, pick)\n",
    "            if rix:\n",
    "                update_cell(ws, rix, COLS.index(\"Status\") + 1, \"Completed\")\n",
    "                update_cell(ws, rix, COLS.index(\"Completion Date\") + 1, dt.date.today().isoformat())\n",
    "                if not pending[pending[\"Task ID\"] == pick][\"Approved By\"].iloc[0]:\n",
    "                    update_cell(ws, rix, COLS.index(\"Approved By\") + 1, current_user)\n",
    "                st.success(\"Task marked completed.\")\n",
    "                st.experimental_rerun()\n",
    "        if colC.button(\"Reject\"):\n",
    "            rix = row_index_by_task_id(df, pick)\n",
    "            if rix:\n",
    "                update_cell(ws, rix, COLS.index(\"Status\") + 1, \"Rejected\")\n",
    "                update_cell(ws, rix, COLS.index(\"Approved By\") + 1, current_user)\n",
    "                st.warning(\"Task rejected.\")\n",
    "                st.experimental_rerun()\n",
    "    else:\n",
    "        st.info(\"No tasks awaiting approval.\")\n",
    "\n",
    "    st.markdown(\"---\")\n",
    "    st.subheader(\"‚úèÔ∏è Edit / üóëÔ∏è Delete any task\")\n",
    "    if not df.empty:\n",
    "        to_manage = st.selectbox(\"Pick Task ID\", df[\"Task ID\"].tolist())\n",
    "        if to_manage:\n",
    "            row = df[df[\"Task ID\"] == to_manage].iloc[0]\n",
    "            with st.form(\"admin_edit\"):\n",
    "                client = st.text_input(\"Client Name\", row[\"Client Name\"])\n",
    "                work = st.text_area(\"Work Detail\", row[\"Work Detail\"])\n",
    "                target = st.date_input(\"Target Date\", value=(row[\"Target Date\"].date() if pd.notna(row[\"Target Date\"]) else dt.date.today()))\n",
    "                priority = st.selectbox(\"Priority\", PRIORITY_CHOICES, index=PRIORITY_CHOICES.index(row[\"Priority\"]) if row[\"Priority\"] in PRIORITY_CHOICES else 1)\n",
    "                status = st.selectbox(\"Status\", STATUS_ADMIN_CHOICES, index=STATUS_ADMIN_CHOICES.index(row[\"Status\"]) if row[\"Status\"] in STATUS_ADMIN_CHOICES else 0)\n",
    "                completion = st.date_input(\"Completion Date\", value=(row[\"Completion Date\"].date() if pd.notna(row[\"Completion Date\"]) else dt.date.today()))\n",
    "                remarks = st.text_area(\"Remarks\", row.get(\"Remarks\", \"\"))\n",
    "                assigned_to = st.text_input(\"Assigned To\", row.get(\"Assigned To\", \"\"))\n",
    "                submit_edit = st.form_submit_button(\"Save Changes\")\n",
    "            col1, col2 = st.columns(2)\n",
    "            with col1:\n",
    "                if submit_edit:\n",
    "                    new_row = [\n",
    "                        row[\"Date\"].date().isoformat() if pd.notna(row[\"Date\"]) else dt.date.today().isoformat(),\n",
    "                        row[\"Task ID\"],\n",
    "                        client,\n",
    "                        work,\n",
    "                        target.isoformat(),\n",
    "                        priority,\n",
    "                        status,\n",
    "                        completion.isoformat() if completion else \"\",\n",
    "                        remarks,\n",
    "                        row[\"Created By\"],\n",
    "                        assigned_to,\n",
    "                        row.get(\"Approved By\", \"\")\n",
    "                    ]\n",
    "                    rix = row_index_by_task_id(df, row[\"Task ID\"])\n",
    "                    update_row(ws, rix, new_row)\n",
    "                    st.success(\"Updated.\")\n",
    "                    st.experimental_rerun()\n",
    "            with col2:\n",
    "                if st.button(\"üóëÔ∏è Delete Task\"):\n",
    "                    rix = row_index_by_task_id(df, row[\"Task ID\"])\n",
    "                    delete_row(ws, rix)\n",
    "                    st.warning(\"Deleted.\")\n",
    "                    st.experimental_rerun()\n",
    "\n",
    "# ---------------- Role: Employee ----------------\n",
    "elif role == \"Employee\":\n",
    "    my_df = df[(df[\"Assigned To\"] == current_user) | (df[\"Created By\"] == current_user)].copy()\n",
    "\n",
    "    kpi_cards(my_df, f\"Employee: {current_user}\")\n",
    "    st.subheader(\"üë®‚Äçüíª My Tasks\")\n",
    "    st.dataframe(my_df.sort_values(by=\"Target Date\", na_position=\"last\"), use_container_width=True)\n",
    "\n",
    "    st.markdown(\"---\")\n",
    "    st.subheader(\"‚ûï Create New Task (goes to Pending Approval)\")\n",
    "    with st.form(\"create_task\"):\n",
    "        client = st.text_input(\"Client Name\")\n",
    "        work = st.text_area(\"Work Detail\")\n",
    "        target = st.date_input(\"Target Date\", value=dt.date.today())\n",
    "        priority = st.selectbox(\"Priority\", PRIORITY_CHOICES, index=1)\n",
    "        assigned_to = st.text_input(\"Assign To\", value=current_user)\n",
    "        remarks = st.text_area(\"Remarks\", \"\")\n",
    "        submit = st.form_submit_button(\"Create Task\")\n",
    "        if submit:\n",
    "            if not client or not work:\n",
    "                st.error(\"Client Name and Work Detail are required.\")\n",
    "            else:\n",
    "                today = dt.date.today().isoformat()\n",
    "                task_id = f\"T{dt.datetime.now().strftime('%Y%m%d%H%M%S')}-{uuid.uuid4().hex[:6]}\"\n",
    "                row_vals = [\n",
    "                    today,\n",
    "                    task_id,\n",
    "                    client,\n",
    "                    work,\n",
    "                    target.isoformat(),\n",
    "                    priority,\n",
    "                    \"Pending Approval\",\n",
    "                    \"\",\n",
    "                    remarks,\n",
    "                    current_user,\n",
    "                    assigned_to,\n",
    "                    \"\"\n",
    "                ]\n",
    "                append_row(ws, row_vals)\n",
    "                st.success(\"Task submitted for approval.\")\n",
    "                st.experimental_rerun()\n",
    "\n",
    "    st.markdown(\"---\")\n",
    "    st.subheader(\"üìà Update Progress (only after approval)\")\n",
    "    up_df = my_df[~my_df[\"Status\"].isin([\"Pending Approval\", \"Rejected\"])]\n",
    "    if up_df.empty:\n",
    "        st.info(\"No tasks ready for progress update (waiting for approval or none assigned).\")\n",
    "    else:\n",
    "        up_task = st.selectbox(\"Select Task ID\", up_df[\"Task ID\"].tolist())\n",
    "        if up_task:\n",
    "            row = up_df[up_df[\"Task ID\"] == up_task].iloc[0]\n",
    "            with st.form(\"progress_form\"):\n",
    "                new_status = st.selectbox(\"New Status\", STATUS_EMPLOYEE_CHOICES,\n",
    "                                          index=STATUS_EMPLOYEE_CHOICES.index(\"In Progress\") if row[\"Status\"] != \"Completed\" else STATUS_EMPLOYEE_CHOICES.index(\"Completed\"))\n",
    "                new_remarks = st.text_area(\"Remarks\", row.get(\"Remarks\", \"\"))\n",
    "                save = st.form_submit_button(\"Update Progress\")\n",
    "                if save:\n",
    "                    rix = row_index_by_task_id(df, row[\"Task ID\"])\n",
    "                    update_cell(ws, rix, COLS.index(\"Status\") + 1, new_status)\n",
    "                    update_cell(ws, rix, COLS.index(\"Remarks\") + 1, new_remarks)\n",
    "                    if new_status == \"Completed\":\n",
    "                        update_cell(ws, rix, COLS.index(\"Completion Date\") + 1, dt.date.today().isoformat())\n",
    "                    st.success(\"Progress updated.\")\n",
    "                    st.experimental_rerun()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1e6a3be-3463-4a02-bc88-c1710c70f8e3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6539d3d9-de9b-4849-8b50-29be6f70f542",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
